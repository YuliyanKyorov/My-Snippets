0. cr - Console.ReadLine(); // четене на вход от потребител (гонз0лата).Върнатата стойност е стринг.

1. ipr - int name = int.Parse(Console.ReadLine());  // нов int чакащ вход от потребителя

2. ca -  type[] names  = new type [size];    // създава нов празен масив

3. cl  - List<type> name = new List<type>(); //  създава нов лист от  вид променлива

4. str - string name = Console.ReadLine();  //  нов стринг чакащ вход от usera

5. crs - string[] name = Console.ReadLine() .Split(", "); Console.ReadLine() // Чете вход от конзолата като низ (string).
.Split(", ") – Разделя прочетения низ на поднизове, използвайки ", " (запетая и интервал) като разделител.
string[] name – Декларира масив от низове (string[]), който ще съдържа резултатите от разделянето.

6. ssa - int[] numbers = Console.ReadLine().Split(", ").Select(int.Parse).ToArray();//Чете входа като низ (string).
.Split(", ") – Разделя низа на части, използвайки ", " (запетая и интервал) като разделител.
.Select(int.Parse) – Преобразува всеки елемент от масива (който е string) в цяло число (int).
.ToArray() – Преобразува резултата обратно в масив от цели числа (int[]).

7. ssl - List<int> numbers = Console.ReadLine() .Split(", ") .Select(int.Parse) .ToList();//Чете входа като низ (string).
.Split(", ") – Разделя прочетения низ на поднизове, използвайки ", " (запетая и интервал) като разделител.
.Select(int.Parse) – Преобразува всеки подниз в цяло число (int).
.ToList() – Преобразува резултата в списък от цели числа (List<int>)

8. sysypm - namespace ConsoleApp1 { internal class Program { static void Main(string[] args) { }}//namespace ConsoleApp1
Дефинира пространство от имена (namespace), което групира класове и други типове. ConsoleApp1 е името на пространството, което обикновено съвпада с името на проекта.internal class Program Дефинира клас с име Program.Модификаторът internal означава, че този клас е достъпен само в рамките на същия проект. static void Main(string[] args) Това е главният метод (Main), който се изпълнява първи при стартиране на програмата.
string[] args – Това е масив от аргументи, които могат да се подават от командния ред.void – Методът няма връщана стойност. Тяло на метода { }

9. cr - Console.ReadLine();// четене на вход от конзолата като низ (string).

10. no - Създаване на нов обект
MyClass myObject = new MyClass();

11. nl - Инициализация на списък
List<int> numbers = new List<int>() { 1, 2, 3, 4, 5 };

12. fcw - Преминаване през списък с foreach цикъл
foreach (int number in numbers)
{
    Console.WriteLine(number);
}

13. adi - Добавяне на елемент към списък
numbers.Add(0);

14. rmi - Премахване на елемент от списък
numbers.Remove(0);

15. bc - Проверка дали списък съдържа определен елемент
bool containsNumber = numbers.Contains(4);

16. sl - Сортиране на списък
numbers.Sort();

17. rl - Обръщане на реда на елементите в списък
numbers.Reverse();

18. fl - Филтриране на списък с LINQ
var evenNumbers = numbers.Where(n => n % 2 == 0).ToList();

19. ig - Групиране на елементи по критерий
var groupedByRemainder = numbers.GroupBy(n => n % 3);

20. ll - Обединяване на два списъка
List<int> moreNumbers = new List<int>() { 7, 8, 9 };
var combinedList = numbers.Concat(moreNumbers).ToList();

21. anm - Използване на анонимни методи
Action<string> printString = delegate (string s) { Console.WriteLine(s); };
printString("Hello, world!");

22. lax - Използване на ламбда изрази
Func<int, int> square = x => x * x;
int result = square(5);

23. dic - Работа с речници (Dictionary)
Dictionary<string, int> ages = new Dictionary<string, int>()
{
    {"Name1", 01},
    {"Name2", 02}
};
24. acd - Достъп до стойност в речник
int namesAge = ages["Name"];

25. ank - Добавяне на нова двойка ключ-стойност в речник
ages.Add("Name", 01);

26. cnk - Проверка дали речник съдържа определен ключ
bool hasKey = ages.ContainsKey("Bob");

27. rmi - Премахване на елемент от речник
numbers.Remove(0);

28. uty - Използване на try-catch блокове за обработка на изключения
try
{
    // Код, който може да хвърли изключение
}
catch (Exception ex)
{
    Console.WriteLine($"Възникна грешка: {ex.Message}");
}
finally
{
    // Код, който винаги се изпълнява независимо от изключението
}

29. ua - Използване на using за автоматично освобождаване на ресурси
using (StreamWriter writer = new StreamWriter("example.txt"))
{
    writer.WriteLine("This is an example.");
}

30. dn - Декларация и инициализация на речник
var dic = new Dictionary<object, object>();

31.dnx - Създава нов речник 
var dic = new Dictionary<object, object>() { [0] = null };

32. dc - Речник Dictionary
Dictionary<object, object>

33. va - Празен масив от T променлива 
var items = new T[0];

34. vax - Декларация и инициализация на масив с T променлива 
var items = new T[] { null };

35. lx - Празна списък от тип T променлива
List<T>

36. vn - Празен на списък с T променлива
var items = new List<T>();

37. vnx - Декларация и инициализация на списък с T променлива
var items = new List<T>() { null };

38. nc - Нов празен клас
class ClassName
{

}

















